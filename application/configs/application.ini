[production]
; デフォルト設定を記述してください
; その他環境用の設定は、ディレクティブで差分記述してください
; また、ディレクティブ差分記述の際は Apache の環境変数にそのディレクティブ文字列を APPLICATION_ENV というキーで設定することを忘れないで下さい
; -----------
;   例) ステージング環境用に [staging : production] というディレクティブにした場合
;
;     方法1: httpd.conf で設定する(推奨)
;
;             #ENV
;             SetEnv APPLICATION_ENV staging
;              
;     方法2: .htaccess で設定する(VMや個人環境で一時的に切り替えたい場合)
;
;             (記述内容は方法1と同じ)
; -----------
phpSettings.display_startup_errors = 0
phpSettings.display_errors = 0
includePaths.library = APPLICATION_PATH "/../library"
bootstrap.path = APPLICATION_PATH "/Bootstrap.php"
bootstrap.class = "Bootstrap"
appnamespace = "Application"
resources.frontController.controllerDirectory = APPLICATION_PATH "/controllers"
resources.frontController.moduleDirectory = APPLICATION_PATH "/modules"
resources.frontController.params.displayExceptions = 0
resources.layout.layout = "layout"
resources.layout.layoutPath = APPLICATION_PATH "/module/app/layouts/scripts"
resources.modules[] =

; DBメタデータキャッシュ制御
;   パフォーマンス・チューニングの一環です。
;   Zend_Db のデフォルト挙動である、「DBメタデータの取得」をZendの標準機能を使ってキャッシュします。
;   backend の設定は各タイトルや仮想マシンの実行環境に合わせてください。
;   下記の場合では、
;   APPLICATION_PATH の cache ディレクトリ配下に、ファイルでキャッシュします。
;   ファイルキャッシュの場合、出力先ディレクトリを適切なパーミッションで事前に作成しておく必要があります。
;   また、ファイルキャッシュの場合はWebユーザーでキャッシュファイルが生成されることを予めご注意ください。
;   参考：http://framework.zend.com/manual/ja/zend.cache.backends.html#zend.cache.backends
; -----------------------------------------
; DBメタデータキャッシュ制御の設定：ここから
resources.cachemanager.db.frontend.name = "Core" 
resources.cachemanager.db.frontend.customFrontendNaming = false
resources.cachemanager.db.frontend.options.lifetime = 7200
resources.cachemanager.db.frontend.options.automatic_serialization = true
resources.cachemanager.db.backend.name = "File" 
resources.cachemanager.db.backend.customBackendNaming = false
resources.cachemanager.db.backend.options.cache_dir = APPLICATION_PATH "/cache" 
resources.cachemanager.db.frontendBackendAutoload = false
resources.db.defaultMetadataCache = "db" 
; DBメタデータキャッシュ制御の設定：ここまで
; -----------------------------------------

; Zend_Date
;   http://framework.zend.com/manual/1.11/ja/zend.date.overview.html
;   >>Zend_Date はアプリケーション単位でのロケールの使用にも対応します。
;   >>そのためには、Zend_Locale のインスタンスを以下のようにレジストリに登録します。 
;   >>このようにすれば、同じロケールを何度も使用したいときに 各インスタンスで毎回ロケールを設定する手間を省けます。
;   
;   ↓ロケールはコードに書かなくともリソースプラグインで対応可能
;    
; 利用できるリソースプラグイン:Zend_Application_Resource_Locale
;   http://framework.zend.com/manual/1.11/ja/zend.application.available-resources.html#zend.application.available-resources.locale
resources.locale.default = "ja_JP"
resources.locale.force   = true
resources.locale.cache   = "locale"

; DB接続情報(複数DB用に"mainDb"など中カテゴリを用意)
db.mainDb.adapterNamespace = "Common_Db_Adapter"
db.mainDb.type     = "pdo_mysql"
db.mainDb.dbname   = "misp"
db.mainDb.port     = "3306"
db.mainDb.charset  = "UTF8"
db.subDb.adapterNamespace = "Common_Db_Adapter"
db.subDb.type     = "pdo_mysql"
db.subDb.dbname   = "misp"
db.subDb.port     = "3306"
db.subDb.charset  = "UTF8"

; ログ共通設定
log.common.id.type = "hash"

; 各種ログ設定
;columnMappingの左辺の項目がDBのカラム名
;columnMappingの右辺の項目がsetEventItemのキー名
; アクセスロガー
log.access.writer                              = "Zend_Log_Writer_Stream"
log.access.formatter                           = "Common_Log_Formatter_EncryptedJson"
log.access.database                            = "log" 
log.access.table                               = "access_log"
log.access.file                                = "/home/depuser/work/applog/misp/maql/prd/access.log"
log.access.columnMapping.access_log_id         = "access_log_id"
log.access.columnMapping.request_access_log_id = "request_access_log_id"
log.access.columnMapping.io_type               = "io_type"
log.access.columnMapping.local_host            = "local_host"
log.access.columnMapping.remote_host           = "remote_host"
log.access.columnMapping.request_method        = "request_method"
log.access.columnMapping.request_uri           = "request_uri"
log.access.columnMapping.request_parameter     = "request_parameter"
log.access.columnMapping.http_version          = "http_version"
log.access.columnMapping.http_status           = "http_status"
log.access.columnMapping.http_header           = "http_header"
log.access.columnMapping.http_body             = "http_body"
log.access.columnMapping.http_referer          = "http_referer"
log.access.columnMapping.user_agent            = "user_agent"
log.access.columnMapping.creation_date         = "creation_date"
log.access.columnMapping.updated_date          = "updated_date"
log.access.columnMapping.deleted_date          = "deleted_date"
log.access.tag        = "standardization.access_log"

; 外部ロガー
log.external.writer                                = "Zend_Log_Writer_Stream"
log.external.formatter                             = "Common_Log_Formatter_EncryptedJson"
log.external.database                              = "log" 
log.external.table                                 = "external_log"
log.external.file                                  = "/home/depuser/work/applog/misp/maql/prd/external.log"
log.external.columnMapping.external_log_id        = "external_log_id"
log.external.columnMapping.access_log_id           = "access_log_id"
log.external.columnMapping.request_external_log_id = "request_external_log_id"
log.external.columnMapping.platform                = "platform"
log.external.columnMapping.api_name                = "api_name"
log.external.columnMapping.io_type                 = "io_type"
log.external.columnMapping.local_host              = "local_host"
log.external.columnMapping.remote_host             = "remote_host"
log.external.columnMapping.request_method          = "request_method"
log.external.columnMapping.request_uri             = "request_uri"
log.external.columnMapping.request_parameter       = "request_parameter"
log.external.columnMapping.http_version            = "http_version"
log.external.columnMapping.http_status             = "http_status"
log.external.columnMapping.http_header             = "http_header"
log.external.columnMapping.http_body               = "http_body"
log.external.columnMapping.http_referer            = "http_referer"
log.external.columnMapping.user_agent              = "user_agent"
log.external.columnMapping.creation_date           = "creation_date"
log.external.columnMapping.updated_date            = "updated_date"
log.external.columnMapping.deleted_date            = "deleted_date"
log.external.tag        = "standardization.external_log"

; 内部ロガー
log.internal.writer                       = "Zend_Log_Writer_Stream"
log.internal.formatter                    = "Common_Log_Formatter_EncryptedJson"
log.internal.database                     = "log"
log.internal.table                        = "internal_log"
log.internal.file                         = "/home/depuser/work/applog/misp/maql/prd/internal.log"
log.internal.columnMapping.internal_log_id = "internal_log_id"
log.internal.columnMapping.access_log_id  = "access_log_id"
log.internal.columnMapping.log_level      = "log_level"
log.internal.columnMapping.log_message    = "log_message"
log.internal.columnMapping.creation_date  = "creation_date"
log.internal.columnMapping.updated_date   = "updated_date"
log.internal.columnMapping.deleted_date   = "deleted_date"
log.internal.tag        = "standardization.internal_log"

; 例外ロガー
log.exception.writer                        = "Zend_Log_Writer_Stream"
log.exception.formatter                     = "Common_Log_Formatter_EncryptedJson"
log.exception.database                      = "log"
log.exception.table                         = "exception_log"
log.exception.file                          = "/home/depuser/work/applog/misp/maql/prd/exception.log"
log.exception.columnMapping.exception_log_id = "exception_log_id"
log.exception.columnMapping.access_log_id   = "access_log_id"
log.exception.columnMapping.log_level       = "log_level"
log.exception.columnMapping.log_message     = "log_message"
log.exception.columnMapping.exception_class = "exception_class"
log.exception.columnMapping.code            = "code"
log.exception.columnMapping.file            = "file"
log.exception.columnMapping.class           = "class"
log.exception.columnMapping.method          = "method"
log.exception.columnMapping.line            = "line"
log.exception.columnMapping.creation_date   = "creation_date"
log.exception.columnMapping.updated_date    = "updated_date"
log.exception.columnMapping.deleted_date    = "deleted_date"
log.exception.tag        = "standardization.exception_log"

; HTTPクライアントの設定
httpClient.adapter    = 
httpClient.proxy_host = 
httpClient.proxy_port = 

; AuthHelperの設定
auth.session.timeout = 3600
auth.adapter = "Zend_Auth_Adapter_DbTable"
auth.database = "mainDb"

; NGワード設定
ngWord.database = "subDb"

; セッション設定
resources.session.saveHandler.class = "Misp_Session_SaveHandler_DbTable"
resources.session.saveHandler.options.name = "session"
resources.session.saveHandler.options.primary = "id"
resources.session.saveHandler.options.modifiedColumn = "modified"
resources.session.saveHandler.options.dataColumn = "data"
resources.session.saveHandler.options.lifetimeColumn = "lifetime"
resources.session.saveHandler.options.lifetime = 600

; MISP固有の共通設定
misp.application.db           = "mainDb"
misp.applicationUser.db       = "mainDb"
misp.db.main                  = "mainDb"
misp.db.sub                   = "subDb"
misp.idToken.expTime          = "86400"
misp.supported.languages[]    = "ja"
misp.supported.languages[]    = "en"
; マーベラスメンバーズ設定
misp.marvelousmembers.path    = "https://www.marv-m.jp/openid"
; 認可コードの有効期限(Basicの推奨仕様は10分(600秒)だが長すぎるので3分(180秒)とする)
misp.authorizationCode.expire = 180

[staging : production]
; staging 環境の差分設定を記述してください

;マーベラスメンバーズ設定
misp.marvelousmembers.path = "https://stg-www.marv-m.jp/openid"

;
; 各種ログ設定
;
; Fluentを使用する場合、writerを "Zend_Log_Writer_Stream" に設定して下さい
; formatterは必ずCommon_Log_Formatter_EncryptedJsonにして下さい
; td-agent.confの <source> type tail のpathで指定した値と同じにして下さい
log.access.writer       = "Zend_Log_Writer_Stream"
log.access.formatter    = "Common_Log_Formatter_Json"
log.access.file         = "/home/depuser/work/applog/misp/maql/stg/access.log"
; 外部ロガー
log.external.writer     = "Zend_Log_Writer_Stream"
log.external.formatter  = "Common_Log_Formatter_Json"
log.external.file       = "/home/depuser/work/applog/misp/maql/stg/external.log"
 
; 内部ロガー
log.internal.writer     = "Zend_Log_Writer_Stream"
log.internal.formatter  = "Common_Log_Formatter_Json"
log.internal.file       = "/home/depuser/work/applog/misp/maql/stg/internal.log"
 
; 例外ロガー
log.exception.writer    = "Zend_Log_Writer_Stream"
log.exception.formatter = "Common_Log_Formatter_Json"
log.exception.file      = "/home/depuser/work/applog/misp/maql/stg/exception.log"

; 開発/ステージングはHTTPSではないので、falseにしないと動作しない(クッキーが送信されないため毎回新規接続扱いになってしまう)
resources.session.cookie_httponly          = false
resources.session.cookie_secure            = false

[testing : production]
; testing 環境の差分設定を記述してください

phpSettings.display_startup_errors = 1
phpSettings.display_errors = 1

; テスト駆動時はここにDB設定を記述しておかないとDBアダプタ周りでエラーになる
resources.db.adapter = "pdo_mysql"
resources.db.params.host = "127.0.0.1"
resources.db.params.username = "appuser"
resources.db.params.password = "k9EDqhDHaxYtuFEG"
resources.db.params.dbname = "misp"
resources.db.params.port = "3306"
resources.db.isDefaultTableAdapter = true

; DB接続設定
db.mainDb.username = "appuser"
db.mainDb.password = "k9EDqhDHaxYtuFEG"
db.subDb.username = "appuser"
db.subDb.password = "k9EDqhDHaxYtuFEG"

;
; 各種ログ設定
;
; Fluentを使用する場合、writerを "Zend_Log_Writer_Stream" に設定して下さい
; formatterは必ずCommon_Log_Formatter_EncryptedJsonにして下さい
; td-agent.confの <source> type tail のpathで指定した値と同じにして下さい
;
; アクセスロガー
log.access.writer       = "Zend_Log_Writer_Stream"
log.access.formatter    = "Common_Log_Formatter_Json"
log.access.file         = "/dev/null"
; 外部ロガー
log.external.writer     = "Zend_Log_Writer_Stream"
log.external.formatter  = "Common_Log_Formatter_Json"
log.external.file       = "/dev/null"
; 内部ロガー
log.internal.writer     = "Zend_Log_Writer_Stream"
log.internal.formatter  = "Common_Log_Formatter_Json"
log.internal.file       = "/dev/null"
; 例外ロガー
log.exception.writer    = "Zend_Log_Writer_Stream"
log.exception.formatter = "Common_Log_Formatter_Json"
log.exception.file      = "/dev/null"

; IDトークンペイロードの固定値設定
misp.idToken.iss = "http://misp-dev-gdsf.marv-games.jp"

misp.jmeter.path           = "http://misp-dev-gdsf.marv-games.jp"
misp.hybridauth.baseUrl    = "http://misp-dev-gdsf.marv-games.jp/marvelous/federation/auth"


[development : production]
; development 環境の差分設定を記述してください

phpSettings.display_startup_errors = 1
phpSettings.display_errors = 1
resources.frontController.params.displayExceptions = 1

; DB接続設定
db.mainDb.username = "appuser"
db.mainDb.password = "k9EDqhDHaxYtuFEG"
db.mainDb.host     = "127.0.0.1"
db.mainDb.dbname   = "misp"
db.subDb.username  = "appuser"
db.subDb.password  = "k9EDqhDHaxYtuFEG"
db.subDb.dbname   = "misp"
db.subDb.host      = "127.0.0.1"

; IDトークンペイロードの固定値設定
misp.idToken.iss = "http://misp-dev-gdsf.marv-games.jp"

; マーベラスメンバーズ設定
misp.marvelousmembers.path = "https://www.marv-m.jp/openid"
 
; JMeter用のダミーOpenID Provider用の設定
misp.jmeter.path           = "http://misp-dev-gdsf.marv-games.jp"

; HybridAuth設定
misp.hybridauth.baseUrl    = "http://misp-dev-gdsf.marv-games.jp/marvelous/federation/auth"

;
; 各種ログ設定
;
; Fluentを使用する場合、writerを "Zend_Log_Writer_Stream" に設定して下さい
; formatterは必ずCommon_Log_Formatter_EncryptedJsonにして下さい
; td-agent.confの <source> type tail のpathで指定した値と同じにして下さい
;
; アクセスロガー
log.access.writer       = "Zend_Log_Writer_Stream"
log.access.formatter    = "Common_Log_Formatter_Json"
log.access.file         = "/home/depuser/work/applog/misp/maql/dev/access.log"
 
; 外部ロガー
log.external.writer     = "Zend_Log_Writer_Stream"
log.external.formatter  = "Common_Log_Formatter_Json"
log.external.file       = "/home/depuser/work/applog/misp/maql/dev/external.log"
 
; 内部ロガー
log.internal.writer     = "Zend_Log_Writer_Stream"
log.internal.formatter  = "Common_Log_Formatter_Json"
log.internal.file       = "/home/depuser/work/applog/misp/maql/dev/internal.log"
 
; 例外ロガー
log.exception.writer    = "Zend_Log_Writer_Stream"
log.exception.formatter = "Common_Log_Formatter_Json"
log.exception.file      = "/home/depuser/work/applog/misp/maql/dev/exception.log"

; 開発/ステージングはHTTPSではないので、falseにしないと動作しない(クッキーが送信されないため毎回新規接続扱いになってしまう)
resources.session.cookie_httponly          = false
resources.session.cookie_secure            = false

[standby : production]
; standby 環境の差分設定を記述してください
